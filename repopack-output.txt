This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-01T17:52:50.886Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
client/.gitignore
client/components.json
client/eslint.config.js
client/index.html
client/package.json
client/postcss.config.js
client/public/discord-brands-solid.svg
client/README.md
client/src/AuthContext.tsx
client/src/Components/Auth/AuthButton.tsx
client/src/Components/Auth/AuthInput.tsx
client/src/Components/Auth/AuthLayout.tsx
client/src/Components/Chat.tsx
client/src/Components/Home/ActiveNow.tsx
client/src/Components/Home/FriendSidebar.tsx
client/src/Components/Home/FriendsList.tsx
client/src/Components/Home/FriendsNavBar.tsx
client/src/Components/index.ts
client/src/Components/Profile/ProfileModal.tsx
client/src/Components/Profile/SettingsButton.tsx
client/src/Components/Server/ChannelSidebar.tsx
client/src/Components/Server/MemberList.tsx
client/src/Components/ServerSidebar.tsx
client/src/Components/ui/button.tsx
client/src/Components/ui/dialog.tsx
client/src/index.css
client/src/lib/utils.ts
client/src/main.tsx
client/src/Pages/HomePage.tsx
client/src/Pages/index.ts
client/src/Pages/LoginPage.tsx
client/src/Pages/RegisterPage.tsx
client/src/Pages/ServerPage.tsx
client/src/Routing/PrivateRoute.tsx
client/src/Routing/routes.tsx
client/src/vite-env.d.ts
client/tailwind.config.js
client/tsconfig.app.json
client/tsconfig.json
client/tsconfig.node.json
client/vite.config.ts
discord-clone-erd.mermaid
Online FlowChart & Diagrams Editor - Mermaid Live Editor.html
package.json
README.MD
server/.gitignore
server/package.json
server/prisma/migrations/20241028162706_init/migration.sql
server/prisma/migrations/20241028203317_init/migration.sql
server/prisma/migrations/20241031185300_add_recipient_id_and_message_type/migration.sql
server/prisma/migrations/20241031185431_add_default_message_type/migration.sql
server/prisma/migrations/migration_lock.toml
server/prisma/schema.prisma
server/src/Auth/passportConfig.ts
server/src/Controllers/AppController.ts
server/src/Controllers/AuthController.ts
server/src/Controllers/ChatController.ts
server/src/db/messageQueries.ts
server/src/db/prisma.ts
server/src/db/Queries.ts
server/src/db/seed.ts
server/src/index.ts
server/src/Middleware/AuthenticateJWT.ts
server/src/Middleware/ErrorHandler.ts
server/src/Routes/AppRouter.ts
server/src/Routes/AuthRouter.ts
server/src/Routes/ChatRouter.ts
server/tsconfig.json

================================================================
Repository Files
================================================================

================
File: client/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# 
.env.*

================
File: client/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: client/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: client/index.html
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/discord-brands-solid.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Discord-2</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================
File: client/package.json
================
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-brands-svg-icons": "^6.6.0",
    "@fortawesome/free-regular-svg-icons": "^6.6.0",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.454.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.27.0",
    "shadcn-ui": "^0.9.2",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/node": "^22.8.4",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.13",
    "globals": "^15.11.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.10.0",
    "vite": "^5.4.9"
  }
}

================
File: client/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: client/public/discord-brands-solid.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="#5865f2" d="M524.5 69.8a1.5 1.5 0 0 0 -.8-.7A485.1 485.1 0 0 0 404.1 32a1.8 1.8 0 0 0 -1.9 .9 337.5 337.5 0 0 0 -14.9 30.6 447.8 447.8 0 0 0 -134.4 0 309.5 309.5 0 0 0 -15.1-30.6 1.9 1.9 0 0 0 -1.9-.9A483.7 483.7 0 0 0 116.1 69.1a1.7 1.7 0 0 0 -.8 .7C39.1 183.7 18.2 294.7 28.4 404.4a2 2 0 0 0 .8 1.4A487.7 487.7 0 0 0 176 479.9a1.9 1.9 0 0 0 2.1-.7A348.2 348.2 0 0 0 208.1 430.4a1.9 1.9 0 0 0 -1-2.6 321.2 321.2 0 0 1 -45.9-21.9 1.9 1.9 0 0 1 -.2-3.1c3.1-2.3 6.2-4.7 9.1-7.1a1.8 1.8 0 0 1 1.9-.3c96.2 43.9 200.4 43.9 295.5 0a1.8 1.8 0 0 1 1.9 .2c2.9 2.4 6 4.9 9.1 7.2a1.9 1.9 0 0 1 -.2 3.1 301.4 301.4 0 0 1 -45.9 21.8 1.9 1.9 0 0 0 -1 2.6 391.1 391.1 0 0 0 30 48.8 1.9 1.9 0 0 0 2.1 .7A486 486 0 0 0 610.7 405.7a1.9 1.9 0 0 0 .8-1.4C623.7 277.6 590.9 167.5 524.5 69.8zM222.5 337.6c-29 0-52.8-26.6-52.8-59.2S193.1 219.1 222.5 219.1c29.7 0 53.3 26.8 52.8 59.2C275.3 311 251.9 337.6 222.5 337.6zm195.4 0c-29 0-52.8-26.6-52.8-59.2S388.4 219.1 417.9 219.1c29.7 0 53.3 26.8 52.8 59.2C470.7 311 447.5 337.6 417.9 337.6z"/></svg>

================
File: client/README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: client/src/AuthContext.tsx
================
// AuthContext.tsx
import {
  createContext,
  useContext,
  useState,
  ReactNode,
  useEffect,
} from "react";

interface AuthContextProps {
  userId: number | null;
  setUserId: (id: number | null) => void;
}

const AuthContext = createContext<AuthContextProps | null>(null);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [userId, setUserId] = useState<number | null>(() => {
    // Get initial userId from localStorage
    const storedUserId = localStorage.getItem("userId");
    return storedUserId ? Number(storedUserId) : null; // Convert to number if exists
  });

  // Update localStorage whenever userId changes
  useEffect(() => {
    if (userId !== null) {
      localStorage.setItem("userId", userId.toString()); // Store as string
    } else {
      localStorage.removeItem("userId"); // Clear if userId is null
    }
  }, [userId]);

  return (
    <AuthContext.Provider value={{ userId, setUserId }}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook to use context
// eslint-disable-next-line react-refresh/only-export-components
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

================
File: client/src/Components/Auth/AuthButton.tsx
================
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "secondary";
}

export function AuthButton({
  variant = "primary",
  className = "",
  children,
  ...props
}: ButtonProps) {
  const baseStyles =
    "w-full py-2 px-4 rounded font-medium transition-colors focus:outline-none";
  const variants = {
    primary: "bg-blue-600 hover:bg-blue-700 text-white",
    secondary: "bg-gray-600 hover:bg-gray-700 text-white",
  };

  return (
    <button
      {...props}
      className={`${baseStyles} ${variants[variant]} ${className}`}
    >
      {children}
    </button>
  );
}

================
File: client/src/Components/Auth/AuthInput.tsx
================
import React from "react";

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label: string;
  error?: string;
}

export function AuthInput({
  label,
  error,
  className = "",
  ...props
}: InputProps) {
  return (
    <div className="mb-4">
      <label className="block text-xs font-semibold text-gray-300 uppercase mb-2">
        {label} {props.required && <span className="text-red-500">*</span>}
      </label>
      <input
        {...props}
        className={`w-full px-3 py-2 bg-zinc-900 rounded border ${
          error ? "border-red-500" : "border-zinc-700"
        } text-white placeholder-gray-400 focus:outline-none focus:border-blue-500 transition-colors ${className}`}
      />
      {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
    </div>
  );
}

================
File: client/src/Components/Auth/AuthLayout.tsx
================
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faDiscord } from "@fortawesome/free-brands-svg-icons"; // For brand icons

interface AuthLayoutProps {
  children: React.ReactNode;
}

export function AuthLayout({ children }: AuthLayoutProps) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-blue-900 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            className="absolute rounded-full bg-white/10 animate-float"
            style={{
              width: Math.random() * 100 + 20 + "px",
              height: Math.random() * 100 + 20 + "px",
              left: Math.random() * 100 + "%",
              top: Math.random() * 100 + "%",
              animationDelay: Math.random() * 5 + "s",
              animationDuration: Math.random() * 10 + 10 + "s",
            }}
          />
        ))}
      </div>

      {/* Logo */}
      <div className="absolute top-8 left-8">
        <FontAwesomeIcon icon={faDiscord} className="w-8 h-8 text-white" />
      </div>

      {/* Content */}
      <div className="relative min-h-screen flex items-center justify-center p-4">
        {children}
      </div>
    </div>
  );
}

================
File: client/src/Components/Chat.tsx
================
import {
  Hash,
  Bell,
  Pin,
  Users,
  Search,
  Plus,
  Gift,
  ImagePlus,
  Smile,
} from "lucide-react";
import { useEffect, useState } from "react";
import { io } from "socket.io-client";
import { useAuth } from "../AuthContext";

// Define the types for the message
interface Message {
  id: number;
  content: string;
}

const VITE_API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

const socket = io(VITE_API_BASE_URL); // Adjust this URL based on your server setup

interface ChatProps {
  friendId: number; // Accept channelId as a prop
}

const Chat: React.FC<ChatProps> = ({ friendId }) => {
  // Use channelId in the component
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const { userId } = useAuth();

  useEffect(() => {
    const fetchMessages = async (friendId: number) => {
      try {
        const response = await fetch(`/private/messages/${userId}/${friendId}`); // Adjust the URL based on your backend
        const data = await response.json();
        setMessages(data);
      } catch (error) {
        console.error("Error fetching messages:", error);
      }
    };
    if (friendId) {
      fetchMessages(friendId);
    }
  }, [setMessages, friendId, userId]);

  // Effect to listen for incoming messages
  useEffect(() => {
    socket.on("receiveMessage", (newMessage: Message) => {
      setMessages((prevMessages) => [...prevMessages, newMessage]);
    });

    // Cleanup the event listener on component unmount
    return () => {
      socket.off("receiveMessage");
    };
  }, []);

  const sendMessage = () => {
    if (message.trim()) {
      const newMessage: Message = { id: Date.now(), content: message }; // Create message object
      socket.emit("sendMessage", { friendId, newMessage }); // Send the message to the server with channelId
      setMessage(""); // Clear the input field
    }
  };

  return (
    <div className="flex-1 bg-[#36393f] flex flex-col">
      <div className="h-12 px-4 flex items-center shadow-md">
        <Hash className="w-6 h-6 text-[#8e9297] mr-2" />
        <span className="text-white font-bold">Channel ID: {friendId}</span>
        <div className="ml-auto flex items-center space-x-4 text-[#b9bbbe]">
          <Bell className="w-5 h-5 cursor-pointer" />
          <Pin className="w-5 h-5 cursor-pointer" />
          <Users className="w-5 h-5 cursor-pointer" />
          <Search className="w-5 h-5 cursor-pointer" />
        </div>
      </div>

      <div className="flex-1 overflow-y-auto px-4 py-6">
        {messages.map((msg) => (
          <div className="flex items-start mb-6" key={msg.id}>
            <div className="w-10 h-10 rounded-full bg-[#2f3136] mr-4"></div>
            <div className="bg-[#202225] p-3 rounded-lg">
              <span className="text-white">{msg.content}</span>
            </div>
          </div>
        ))}
      </div>

      <div className="h-16 bg-[#2f3136] flex items-center px-4">
        <input
          type="text"
          className="flex-1 bg-[#202225] text-white rounded px-3 py-2 focus:outline-none"
          placeholder="Type your message here..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />
        <button
          onClick={sendMessage}
          className="ml-2 bg-[#3ba55d] text-white px-4 py-2 rounded"
        >
          Send
        </button>
        <Plus className="w-5 h-5 ml-4 cursor-pointer" />
        <Gift className="w-5 h-5 ml-4 cursor-pointer" />
        <ImagePlus className="w-5 h-5 ml-4 cursor-pointer" />
        <Smile className="w-5 h-5 ml-4 cursor-pointer" />
      </div>
    </div>
  );
};

export default Chat;

================
File: client/src/Components/Home/ActiveNow.tsx
================
const ActiveNow: React.FC = function () {
  return (
    <div className="w-[340px] bg-[#2f3136] p-4 border-l border-[#202225]">
      <h2 className="text-white font-bold mb-4">Active Now</h2>
      <div className="text-center py-8">
        <h3 className="text-white font-semibold mb-2">It's quiet for now...</h3>
        <p className="text-[#B9BBBE] text-sm">
          When a friend starts an activity—like playing a game or hanging out on
          voice—we'll show it here!
        </p>
      </div>
    </div>
  );
}

export default ActiveNow;

================
File: client/src/Components/Home/FriendSidebar.tsx
================
import { Users, Plus } from "lucide-react";
import SettingsButton from "../Profile/SettingsButton";
import { useAuth } from "@/AuthContext";
import axios from "axios";
import { useState, useEffect } from "react";

interface DirectMessage {
  id: number;
  name: string;
  avatar: string;
  status: "online" | "offline" | "idle" | "dnd";
  isGroup?: boolean;
  memberCount?: number;
}

interface FriendSidebarProps {
  toggleChatSection: (id: number | null) => void;
}

const directMessages: DirectMessage[] = [
  { id: 1, name: "viperndgrass", avatar: "🎮", status: "online" },
  { id: 2, name: "Admiral Audacious", avatar: "👤", status: "online" },
  { id: 3, name: "Ethanqg", avatar: "💻", status: "offline" },
  { id: 4, name: "Abwbkr Alhag", avatar: "🎯", status: "idle" },
  {
    id: 5,
    name: "LeetCode",
    avatar: "📚",
    status: "online",
    isGroup: true,
    memberCount: 5,
  },
  { id: 6, name: "aj", avatar: "🎮", status: "dnd" },
  { id: 7, name: "aotmika", avatar: "🎨", status: "online" },
  { id: 8, name: "SamFieri", avatar: "🔥", status: "offline" },
  { id: 9, name: "qwertea", avatar: "☕", status: "online" },
];

function StatusIndicator({ status }: { status: DirectMessage["status"] }) {
  const statusColors = {
    online: "bg-[#3ba55d]",
    offline: "bg-[#747f8d]",
    idle: "bg-[#faa81a]",
    dnd: "bg-[#ed4245]",
  };

  return (
    <div
      className={`absolute bottom-0 right-0 w-3 h-3 ${statusColors[status]} rounded-full border-2 border-[#2f3136]`}
    />
  );
}

export default function FriendSidebar({
  toggleChatSection,
}: FriendSidebarProps) {
  const [friends, setFriends] = useState<DirectMessage[]>([]);
  const { userId } = useAuth();
  const API_URL = import.meta.env.VITE_API_BASE_URL;

  useEffect(() => {
    const fetchFriends = async () => {
      if (!userId) return;
      try {
        const response = await axios.get(`${API_URL}/friends/${userId}`);
        setFriends(response.data.length > 0 ? response.data : directMessages);
      } catch (err) {
        console.log("Error fetching friends ", err);
        setFriends(directMessages);
      }
    };
    fetchFriends();
  }, [API_URL, userId]);

  return (
    <div className="w-60 bg-[#2f3136] flex flex-col">
      <div className="h-12 shadow-md flex items-center px-4">
        <input
          type="text"
          placeholder="Find or start a conversation"
          className="w-full bg-[#202225] text-[#dcddde] text-sm rounded px-2 py-1 focus:outline-none"
        />
      </div>

      <div className="flex-1 overflow-y-auto space-y-2 pt-4">
        <div className="px-2">
          <button
            className="w-full flex items-center px-2 py-1 text-[#dcddde] hover:bg-[#42464D] rounded group"
            onClick={() => toggleChatSection(null)}
          >
            <Users className="w-5 h-5 mr-4" />
            <span className="text-sm">Friends</span>
          </button>
        </div>

        <div className="px-2 pt-4">
          <div className="flex items-center justify-between px-2 text-xs">
            <span className="text-[#96989d] uppercase font-semibold">
              Direct Messages
            </span>
            <Plus className="w-4 h-4 text-[#96989d] hover:text-[#dcddde] cursor-pointer" />
          </div>

          <div className="mt-2 space-y-0.5">
            {friends.map((dm) => (
              <button
                key={dm.id}
                className="w-full flex items-center px-2 py-1 text-[#96989d] hover:text-[#dcddde] hover:bg-[#42464D] rounded group"
                onClick={() => toggleChatSection(dm.id)} // Use user ID to toggle chat room
              >
                <div className="w-8 h-8 rounded-full bg-[#36393f] flex items-center justify-center relative mr-3">
                  <span>{dm.avatar}</span>
                  <StatusIndicator status={dm.status} />
                </div>
                <span className="text-sm flex-1 text-left truncate">
                  {dm.name}
                  {dm.isGroup && (
                    <span className="text-xs text-[#96989d] ml-1">
                      ({dm.memberCount})
                    </span>
                  )}
                </span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="h-14 bg-[#292b2f] px-2 flex items-center mt-auto">
        <div className="w-8 h-8 rounded-full bg-[#36393f] mr-2 relative">
          <StatusIndicator status="online" />
        </div>
        <div className="flex-1">
          <div className="text-white text-sm font-medium">User</div>
          <div className="text-[#b9bbbe] text-xs">#0001</div>
        </div>
        <SettingsButton />
      </div>
    </div>
  );
}

================
File: client/src/Components/Home/FriendsList.tsx
================
import { MessageSquare, Phone, Video, MoreVertical } from "lucide-react";
import axios from "axios";
import { useEffect, useMemo, useState } from "react";
import { useAuth } from "../../AuthContext";

export function FriendsList() {
  const [friends, setFriends] = useState<
    { id: number; name: string; activity: string }[]
  >([]);
  const { userId } = useAuth();
  const API_URL = import.meta.env.VITE_API_BASE_URL;
  const testFriends = useMemo(
    () => [
      {
        id: 1,
        name: "viperndgrass",
        status: "Online",
        activity: "Playing Valorant",
      },
      {
        id: 2,
        name: "Admiral Audacious",
        status: "Online",
        activity: "In Voice Channel",
      },
      {
        id: 3,
        name: "Ethanqg",
        status: "Online",
        activity: "Visual Studio Code",
      },
      { id: 4, name: "Abwbkr Alhag", status: "Online", activity: "Spotify" },
      {
        id: 5,
        name: "aotmika",
        status: "Online",
        activity: "League of Legends",
      },
      {
        id: 6,
        name: "qwertea",
        status: "Online",
        activity: "In Voice Channel",
      },
    ],
    []
  );

  useEffect(() => {
    const fetchFriends = async () => {
      if (!userId) return;
      try {
        const response = await axios.get(`${API_URL}/friends/${userId}`);
        setFriends(response.data.length > 0 ? response.data : testFriends);
      } catch (err) {
        console.log("Error fetching friends ", err);
        setFriends(testFriends);
      }
    };
    fetchFriends();
  }, [API_URL, testFriends, userId]);

  return (
    <div className="flex-1 overflow-y-auto">
      <div className="px-4 py-2">
        <h2 className="text-[#B9BBBE] text-xs font-semibold uppercase mb-2">
          Online — {friends.length}
        </h2>
        {friends.map((friend) => (
          <div
            key={friend.id}
            className="flex items-center p-2 hover:bg-[#42464D] rounded cursor-pointer group"
          >
            <div className="w-8 h-8 rounded-full bg-[#36393f] relative">
              <div className="absolute bottom-0 right-0 w-3 h-3 bg-[#3ba55d] rounded-full border-2 border-[#2f3136]" />
            </div>
            <div className="ml-3 flex-1">
              <div className="text-white text-sm font-medium">
                {friend.name}
              </div>
              <div className="text-[#B9BBBE] text-xs">{friend.activity}</div>
            </div>
            <div className="hidden group-hover:flex items-center space-x-3">
              <button className="w-8 h-8 rounded-full hover:bg-[#36393f] flex items-center justify-center">
                <MessageSquare className="w-5 h-5 text-[#B9BBBE]" />
              </button>
              <button className="w-8 h-8 rounded-full hover:bg-[#36393f] flex items-center justify-center">
                <Phone className="w-5 h-5 text-[#B9BBBE]" />
              </button>
              <button className="w-8 h-8 rounded-full hover:bg-[#36393f] flex items-center justify-center">
                <Video className="w-5 h-5 text-[#B9BBBE]" />
              </button>
              <button className="w-8 h-8 rounded-full hover:bg-[#36393f] flex items-center justify-center">
                <MoreVertical className="w-5 h-5 text-[#B9BBBE]" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: client/src/Components/Home/FriendsNavBar.tsx
================
import { Users } from "lucide-react";

const FriendsNavBar: React.FC = function () {
  return (
    <div className="h-12 border-b border-[#36393f] flex items-center px-4 space-x-4">
      <Users className="w-6 h-6 text-[#dcddde]" />
      <span className="text-white font-medium">Friends</span>
      <div className="h-6 w-[1px] bg-[#36393f]" />
      <button className="text-white hover:bg-[#42464D] px-2 py-1 rounded text-sm">
        Online
      </button>
      <button className="text-[#B9BBBE] hover:text-white hover:bg-[#42464D] px-2 py-1 rounded text-sm">
        All
      </button>
      <button className="text-[#B9BBBE] hover:text-white hover:bg-[#42464D] px-2 py-1 rounded text-sm">
        Pending
      </button>
      <button className="text-[#B9BBBE] hover:text-white hover:bg-[#42464D] px-2 py-1 rounded text-sm">
        Blocked
      </button>
      <button className="bg-[#248046] hover:bg-[#1a6334] text-white px-2 py-1 rounded text-sm ml-auto">
        Add Friend
      </button>
    </div>
  );
}

export default FriendsNavBar;

================
File: client/src/Components/index.ts
================
import ActiveNow from "./Home/ActiveNow";
import ChannelSidebar from "./Server/ChannelSidebar";
import Chat from "./Chat";
import FriendSidebar from "./Home/FriendSidebar";
import { FriendsList } from "./Home/FriendsList";
import FriendsNavBar from "./Home/FriendsNavBar";
import MemberList from "./Server/MemberList";
import ServerSidebar from "./ServerSidebar";
import { AuthButton } from "./Auth/AuthButton";
import { AuthInput } from "./Auth/AuthInput";
import { AuthLayout } from "./Auth/AuthLayout";
import ProfileModal from "./Profile/ProfileModal";
import SettingsButton from "./Profile/SettingsButton";

export {
  ActiveNow,
  ChannelSidebar,
  Chat,
  FriendSidebar,
  FriendsList,
  FriendsNavBar,
  MemberList,
  ServerSidebar,
  AuthButton,
  AuthInput,
  AuthLayout,
  ProfileModal,
  SettingsButton,
};

================
File: client/src/Components/Profile/ProfileModal.tsx
================
import { X, User, Mail, Phone, Shield, Key, AlertTriangle } from "lucide-react";
import { Dialog, DialogContent } from "@/Components/ui/dialog";
import { Button } from "@/Components/ui/button";
// import { cn } from "@/lib/utils"

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function ProfileModal({ isOpen, onClose }: ProfileModalProps) {
  if (!isOpen) return null;

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-none max-h-[95vh] p-0 border-none bg-transparent">
        <div className="fixed inset-0 bg-[#2f3136] backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-[#36393f] w-full max-w-[1000px] rounded-lg shadow-xl flex h-[85vh] relative animate-in fade-in-0 zoom-in-95">
            {/* Sidebar */}
            <div className="w-[232px] bg-[#2f3136] p-3 rounded-l-lg">
              <div className="text-xs font-semibold text-gray-400 mb-2 px-2">
                USER SETTINGS
              </div>
              <button className="w-full text-left px-2 py-1.5 rounded bg-[#42464D] text-white mb-0.5">
                My Account
              </button>
              <button className="w-full text-left px-2 py-1.5 rounded text-gray-300 hover:bg-[#42464D] hover:text-white transition-colors">
                User Profile
              </button>
              <button className="w-full text-left px-2 py-1.5 rounded text-gray-300 hover:bg-[#42464D] hover:text-white transition-colors">
                Privacy & Safety
              </button>
              <button className="w-full text-left px-2 py-1.5 rounded text-gray-300 hover:bg-[#42464D] hover:text-white transition-colors">
                Authorized Apps
              </button>
              <button className="w-full text-left px-2 py-1.5 rounded text-gray-300 hover:bg-[#42464D] hover:text-white transition-colors">
                Connections
              </button>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex flex-col">
              <div className="flex items-center justify-between p-4 border-b border-[#202225]">
                <div className="flex items-center gap-2">
                  <h2 className="text-xl font-semibold text-white">
                    My Account
                  </h2>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  <X className="h-6 w-6" />
                  <span className="sr-only">Close</span>
                </Button>
              </div>

              <div className="flex-1 overflow-y-auto">
                {/* Banner */}
                <div className="h-[100px] bg-[#9c7b6b]" />

                {/* Profile Content */}
                <div className="p-4 -mt-16">
                  <div className="flex items-start gap-4">
                    <div className="relative">
                      <img
                        src="https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=120&h=120&fit=crop"
                        alt="Profile picture"
                        className="w-[100px] h-[100px] rounded-full border-[6px] border-[#36393f] object-cover"
                      />
                      <div className="absolute bottom-1 right-1 w-4 h-4 bg-green-500 rounded-full border-[3px] border-[#36393f]" />
                    </div>

                    <div className="flex-1 pt-16">
                      <div className="flex items-center justify-between mb-6">
                        <h3 className="text-xl font-semibold text-white">
                          Abdalla
                        </h3>
                        <Button className="bg-indigo-500 hover:bg-indigo-600 text-white">
                          Edit User Profile
                        </Button>
                      </div>

                      <div className="space-y-4">
                        {["DISPLAY NAME", "EMAIL", "PHONE NUMBER"].map(
                          (field, index) => (
                            <div
                              key={field}
                              className="bg-[#202225] p-4 rounded"
                            >
                              <div className="flex items-center justify-between mb-1">
                                <div className="flex items-center gap-2 text-gray-300">
                                  {index === 0 && <User className="h-4 w-4" />}
                                  {index === 1 && <Mail className="h-4 w-4" />}
                                  {index === 2 && <Phone className="h-4 w-4" />}
                                  <span>{field}</span>
                                </div>
                                <div className="flex gap-2">
                                  {field === "PHONE NUMBER" && (
                                    <Button
                                      variant="secondary"
                                      className="h-8 bg-[#2f3136] text-gray-300 hover:bg-gray-700"
                                    >
                                      Remove
                                    </Button>
                                  )}
                                  <Button
                                    variant="secondary"
                                    className="h-8 bg-[#2f3136] text-gray-300 hover:bg-gray-700"
                                  >
                                    Edit
                                  </Button>
                                </div>
                              </div>
                              <p className="text-white">
                                {field === "DISPLAY NAME" && "Abdalla"}
                                {field === "EMAIL" && "••••••••••@gmail.com"}
                                {field === "PHONE NUMBER" && "•••••••9758"}
                              </p>
                            </div>
                          )
                        )}
                      </div>

                      <div className="mt-8 space-y-6">
                        <div>
                          <h4 className="text-white font-semibold mb-4">
                            Password and Authentication
                          </h4>
                          <Button className="bg-indigo-500 hover:bg-indigo-600 text-white">
                            Change Password
                          </Button>
                        </div>

                        <div>
                          <div className="flex items-center gap-2 text-gray-300 mb-2">
                            <Shield className="h-4 w-4" />
                            <h5 className="font-medium">AUTHENTICATOR APP</h5>
                          </div>
                          <p className="text-gray-400 mb-3">
                            Protect your account with an extra layer of
                            security. Once configured, you'll be required to
                            enter your password and complete one additional step
                            in order to sign in.
                          </p>
                          <Button className="bg-indigo-500 hover:bg-indigo-600 text-white">
                            Enable Authenticator App
                          </Button>
                        </div>

                        <div>
                          <div className="flex items-center gap-2 text-gray-300 mb-2">
                            <Key className="h-4 w-4" />
                            <h5 className="font-medium">SECURITY KEYS</h5>
                          </div>
                          <Button className="bg-indigo-500 hover:bg-indigo-600 text-white">
                            Register a Security Key
                          </Button>
                        </div>

                        <div className="pb-8">
                          <div className="flex items-center gap-2 text-red-400 mb-2">
                            <AlertTriangle className="h-4 w-4" />
                            <h5 className="font-medium">ACCOUNT REMOVAL</h5>
                          </div>
                          <div className="flex gap-3">
                            <Button className="bg-red-500 hover:bg-red-600 text-white">
                              Disable Account
                            </Button>
                            <Button
                              variant="outline"
                              className="border-red-500 text-red-500 hover:bg-red-500/10"
                            >
                              Delete Account
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/Components/Profile/SettingsButton.tsx
================
import { useState } from "react";
import { Settings } from "lucide-react";
import ProfileModal from "./ProfileModal";

interface SettingsButtonProps {
  className?: string;
}

export default function SettingsButton({
  className = "",
}: SettingsButtonProps) {
  const [isProfileOpen, setIsProfileOpen] = useState(false);

  return (
    <>
      <button
        onClick={() => setIsProfileOpen(true)}
        className={`text-gray-400 hover:text-white transition-colors ${className}`}
      >
        <Settings size={20} />
      </button>

      <ProfileModal
        isOpen={isProfileOpen}
        onClose={() => setIsProfileOpen(false)}
      />
    </>
  );
}

================
File: client/src/Components/Server/ChannelSidebar.tsx
================
import { Hash } from "lucide-react";
import SettingsButton from "../Profile/SettingsButton";

const ChannelSidebar: React.FC = () => {
  return (
    <div className="w-60 bg-[#2f3136] flex flex-col">
      <div className="h-12 px-4 flex items-center shadow-md">
        <h2 className="text-white font-bold">Discord Clone</h2>
      </div>
      <div className="flex-1 overflow-y-auto">
        <div className="px-2 mt-4">
          <div className="flex items-center px-2 text-[#8e9297] text-sm mb-1">
            <Hash className="w-5 h-5 mr-1.5" />
            <span>general</span>
          </div>
          <div className="flex items-center px-2 text-[#8e9297] text-sm mb-1 bg-[#393c43] rounded">
            <Hash className="w-5 h-5 mr-1.5" />
            <span>announcements</span>
          </div>
        </div>
      </div>
      <div className="h-14 bg-[#292b2f] px-2 flex items-center">
        <div className="w-8 h-8 rounded-full bg-[#36393f] mr-2"></div>
        <div className="flex-1">
          <div className="text-white text-sm font-medium">User</div>
          <div className="text-[#b9bbbe] text-xs">#0001</div>
        </div>
        <SettingsButton />
      </div>
    </div>
  );
};

export default ChannelSidebar;

================
File: client/src/Components/Server/MemberList.tsx
================
const MemberList: React.FC = function () {
  return (
    <div className="w-60 bg-[#2f3136] p-4">
      <h3 className="text-[#8e9297] uppercase text-xs font-semibold mb-4">
        Online — 1
      </h3>
      <div className="flex items-center mb-3 cursor-pointer hover:bg-[#36393f] p-2 rounded">
        <div className="w-8 h-8 rounded-full bg-[#36393f] relative">
          <div className="absolute bottom-0 right-0 w-3 h-3 bg-[#3ba55d] rounded-full border-2 border-[#2f3136]"></div>
        </div>
        <span className="text-[#dcddde] ml-2">User</span>
      </div>
    </div>
  );
};

export default MemberList;

================
File: client/src/Components/ServerSidebar.tsx
================
import { useState, useEffect } from "react";
import { MessageSquare, Plus } from "lucide-react";
import axios from "axios";
import { useAuth } from "../AuthContext";
import { Link } from "react-router-dom";

interface Server {
  id: number;
  name: string;
  iconUrl: string;
  createdAt: Date;
}
const ServerSidebar: React.FC = () => {
  const [server, setServer] = useState([]);
  const { userId } = useAuth();
  const API_URL = import.meta.env.VITE_API_BASE_URL;
  useEffect(() => {
    const fetchChannels = async () => {
      if (userId) {
        const response = await axios.get(`${API_URL}/channels/${userId}`);
        setServer(response.data);
      }
    };
    fetchChannels();
  }, [API_URL, userId]);

  return (
    <div className="w-[72px] bg-[#202225] flex flex-col items-center py-3 space-y-2">
      <Link to='/'>
        <div className="w-12 h-12 bg-[#36393f] rounded-[24px] hover:rounded-[16px] transition-all duration-200 flex items-center justify-center cursor-pointer">
          <MessageSquare className="w-6 h-6 text-[#dcddde]" />
        </div>
      </Link>
      <div className="w-12 h-[2px] bg-[#36393f] rounded-full" />
      {server?.length > 0 &&
        server.map((serv: Server) => (
          <a
            key={serv.id}
            href={`/channels/${serv.id}`}
            className="w-12 h-12 bg-[#36393f] rounded-[24px] hover:rounded-[16px] transition-all duration-200 flex items-center justify-center cursor-pointer"
          >
            <div className="w-6 h-6 text-[#dcddde]">
              {serv.name.charAt(0).toUpperCase()}
            </div>
          </a>
        ))}
      <div className="w-12 h-12 bg-[#36393f] rounded-[24px] hover:rounded-[16px] transition-all duration-200 flex items-center justify-center cursor-pointer">
        <Plus className="w-6 h-6 text-[#3ba55d]" />
      </div>
    </div>
  );
};

export default ServerSidebar;

================
File: client/src/Components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: client/src/Components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: client/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: client/src/main.tsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import "./index.css";
import { routes } from "./Routing/routes";
import { AuthProvider } from "./AuthContext";

const router = createBrowserRouter(routes);

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <AuthProvider>
      <RouterProvider router={router} />
    </AuthProvider>
  </StrictMode>
);

================
File: client/src/Pages/HomePage.tsx
================
import {
  ServerSidebar,
  FriendsNavBar,
  FriendsList,
  ActiveNow,
  FriendSidebar,
  Chat,
} from "../Components";
import { useState } from "react";

function HomePage() {
  const [chatId, setChatId] = useState<number | null>(null);

  const toggleChatId = (id: number | null) => {
    setChatId(id);
  };

  return (
    <div className="flex h-screen">
      <ServerSidebar />
      {/* Pass props to friend sidebar to redirect middle section */}
      <FriendSidebar toggleChatSection={toggleChatId} />

      {/* Conditional rendering based on chatSection state */}
      {!chatId ? (
        <>
          <div className="flex-1 bg-[#36393f] flex flex-col">
            <FriendsNavBar />
            <FriendsList />
          </div>
          <ActiveNow />
        </>
      ) : (
        <Chat friendId={chatId} />
      )}
    </div>
  );
}
export default HomePage;

================
File: client/src/Pages/index.ts
================
import HomePage from "./HomePage";
import ServerPage from "./ServerPage";
import {LoginPage} from "./LoginPage";
import {RegisterPage} from "./RegisterPage";

export { HomePage, ServerPage, LoginPage, RegisterPage }

================
File: client/src/Pages/LoginPage.tsx
================
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { QrCode } from "lucide-react";
import { AuthLayout, AuthButton, AuthInput } from "../Components";
import axios from "axios";
import { useAuth } from "../AuthContext";

export function LoginPage() {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [error, setError] = useState<string | null>(null);

  const navigate = useNavigate();
  const baseURL = import.meta.env.VITE_API_BASE_URL;
  const { setUserId } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); // Clear any existing errors

    if (!formData.email || !formData.password) {
      setError("Please fill in all fields");
      return;
    }

    try {
      const res = await axios.post(`${baseURL}/auth/login`, {
        email: formData.email,
        password: formData.password,
      });
      if (res.status === 200) {
        const token = res.data.token;
        localStorage.setItem("token", token);
        localStorage.setItem("userId", res.data.user.id);
        setUserId(res.data.user.id);

        navigate("/", { replace: true });
      } else {
        setError("Login failed. Please try again.");
      }
    } catch (err) {
      if (axios.isAxiosError(err) && err.response) {
        setError(
          err.response.data.message || "Login failed. Please try again."
        );
      } else {
        setError("An unexpected error occurred. Please try again.");
      }
    }
  };

  // const handleGuestLogin = () => {
  //   // Here you would handle guest login logic
  //   // console.log('Guest login attempted');
  //   axios
  //     .post(`${baseURL}/auth/login/guest`, {})
  //     // .post(`${baseURL}/auth/login/guest`, { username, password })
  //     .then((res) => {
  //       if (res.status === 200) {
  //         // Successfully logged in
  //         // Assuming the server returns a token in the response
  //         const token = res.data.token;

  //         // Save token to localStorage
  //         localStorage.setItem("token", token); // Or use sessionStorage or cookies

  //         navigate("/", { replace: true });
  //       } else {
  //         setError("Guest login failed. Please try again.");
  //         console.log("Login failed");
  //       }
  //     })
  //     .catch((err) => {
  //       console.log("Login failed", err);
  //       setError("Guest login failed. Please try again.");
  //     });
  // };

  return (
    <AuthLayout>
      <div className="flex gap-8 max-w-4xl w-full">
        <div className="flex-1">
          <div className="bg-[#2b2d31] p-8 rounded-lg shadow-xl w-full max-w-md">
            <h1 className="text-2xl font-bold text-white mb-2">
              Welcome back!
            </h1>
            <p className="text-gray-400 mb-6">
              We're so excited to see you again!
            </p>
            {error && (
              <div
                className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
                role="alert"
              >
                <span className="block sm:inline">{error}</span>
              </div>
            )}
            <form onSubmit={handleSubmit}>
              <AuthInput
                label="Email or Phone Number"
                type="text"
                required
                value={formData.email}
                onChange={(e) =>
                  setFormData({ ...formData, email: e.target.value })
                }
                autoComplete="email"
              />

              <AuthInput
                label="Password"
                type="password"
                required
                value={formData.password}
                onChange={(e) =>
                  setFormData({ ...formData, password: e.target.value })
                }
                autoComplete="current-password"
              />

              <a
                href="#"
                className="text-sm text-blue-500 hover:underline block mb-6"
              >
                Forgot your password?
              </a>

              <AuthButton type="submit">Log In</AuthButton>

              <p className="mt-4 text-sm text-gray-400">
                Need an account?{" "}
                <Link to="/register" className="text-blue-500 hover:underline">
                  Register
                </Link>
              </p>
            </form>
          </div>
        </div>

        <div className="hidden lg:block flex-1">
          <div className="bg-[#2b2d31] p-8 rounded-lg shadow-xl text-center">
            <QrCode className="w-64 h-64 mx-auto mb-6 text-white" />
            <h2 className="text-2xl font-bold text-white mb-2">
              Log in with QR Code
            </h2>
            <p className="text-gray-400">
              Scan this with the Discord-2 mobile app to log in instantly.
            </p>
          </div>
        </div>
      </div>
    </AuthLayout>
  );
}

================
File: client/src/Pages/RegisterPage.tsx
================
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { AuthLayout, AuthButton, AuthInput } from "../Components";
import axios from "axios";

export function RegisterPage() {
  const [formData, setFormData] = useState({
    email: "",
    username: "",
    password: "",
    confirmPassword: "",
    month: "",
    day: "",
    year: "",
  });
  const [error, setError] = useState<string | null>(null);

  const navigate = useNavigate();
  const baseURL = import.meta.env.VITE_API_BASE_URL;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); // Clear any existing errors

    const { username, email, password, confirmPassword } = formData;

    if (!username || !email || !password || !confirmPassword) {
      setError("Please fill in all fields");
      return;
    }

    const date = new Date(`${formData.year}-${formData.month}-${formData.day}`);
    if (date.getTime() > Date.now() - 1000 * 60 * 60 * 24 * 365 * 13) {
      setError("You must be at least 13 years old to register");
      return;
    }
    if (password !== confirmPassword) {
      setError("Passwords do not match");
      return;
    }

    try {
      const res = await axios.post(`${baseURL}/auth/register`, {
        username,
        email,
        password,
        confirmPassword,
      });

      if (res.status === 200) {
        navigate("/login", { replace: true });
      } else {
        setError("Sign-up failed. Please try again.");
      }
    } catch (err) {
      if (axios.isAxiosError(err) && err.response) {
        setError(
          err.response.data.message || "Sign-up failed. Please try again."
        );
      } else {
        setError("An unexpected error occurred. Please try again.");
      }
    }
  };

  return (
    <AuthLayout>
      <div className="w-full max-w-md">
        <div className="bg-[#2b2d31] p-8 rounded-lg shadow-xl">
          <h1 className="text-2xl font-bold text-white mb-6">
            Create an account
          </h1>
          {error && (
            <div
              className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
              role="alert"
            >
              <span className="block sm:inline">{error}</span>
            </div>
          )}
          <form onSubmit={handleSubmit}>
            <AuthInput
              label="Email"
              type="email"
              required
              value={formData.email}
              onChange={(e) =>
                setFormData({ ...formData, email: e.target.value })
              }
            />

            <AuthInput
              label="Username"
              type="text"
              required
              value={formData.username}
              onChange={(e) =>
                setFormData({ ...formData, username: e.target.value })
              }
              autoComplete="username"
            />

            <AuthInput
              label="Password"
              type="password"
              required
              value={formData.password}
              onChange={(e) =>
                setFormData({ ...formData, password: e.target.value })
              }
              autoComplete="new-password"
            />
            <AuthInput
              label="Confirm Password"
              type="password"
              required
              value={formData.confirmPassword}
              onChange={(e) =>
                setFormData({ ...formData, confirmPassword: e.target.value })
              }
              autoComplete="new-password"
            />

            <div className="mb-6">
              <label className="block text-xs font-semibold text-gray-300 uppercase mb-2">
                Date of Birth <span className="text-red-500">*</span>
              </label>
              <div className="grid grid-cols-3 gap-4">
                <select
                  className="bg-zinc-900 border border-zinc-700 text-white rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                  value={formData.month}
                  onChange={(e) =>
                    setFormData({ ...formData, month: e.target.value })
                  }
                  required
                >
                  <option value="">Month</option>
                  {[
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                  ].map((month) => (
                    <option key={month} value={month}>
                      {month}
                    </option>
                  ))}
                </select>

                <select
                  className="bg-zinc-900 border border-zinc-700 text-white rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                  value={formData.day}
                  onChange={(e) =>
                    setFormData({ ...formData, day: e.target.value })
                  }
                  required
                >
                  <option value="">Day</option>
                  {[...Array(31)].map((_, i) => (
                    <option key={i + 1} value={i + 1}>
                      {i + 1}
                    </option>
                  ))}
                </select>

                <select
                  className="bg-zinc-900 border border-zinc-700 text-white rounded px-3 py-2 focus:outline-none focus:border-blue-500"
                  value={formData.year}
                  onChange={(e) =>
                    setFormData({ ...formData, year: e.target.value })
                  }
                  required
                >
                  <option value="">Year</option>
                  {[...Array(100)].map((_, i) => {
                    const year = new Date().getFullYear() - i;
                    return (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    );
                  })}
                </select>
              </div>
            </div>

            <AuthButton type="submit">Continue</AuthButton>

            <p className="mt-4 text-sm text-gray-400">
              By registering, you agree to Discord-2's{" "}
              <a className="text-blue-500 hover:underline cursor-pointer">
                Terms of Service
              </a>{" "}
              and{" "}
              <a className="text-blue-500 hover:underline cursor-pointer">
                Privacy Policy
              </a>
              .
            </p>

            <p className="mt-4 text-sm text-gray-400">
              Already have an account?{" "}
              <Link to="/login" className="text-blue-500 hover:underline">
                Log In
              </Link>
            </p>
          </form>
        </div>
      </div>
    </AuthLayout>
  );
}

================
File: client/src/Pages/ServerPage.tsx
================
// import { useEffect, useState } from "react";
// import axios from "axios";
import { ServerSidebar, ChannelSidebar, Chat, MemberList } from "../Components";

function HomePage() {
  return (
    <div className="flex h-screen">
      <ServerSidebar />
      <ChannelSidebar />
      <Chat />
      <MemberList />
    </div>
  );
}
export default HomePage;

================
File: client/src/Routing/PrivateRoute.tsx
================
import React from "react";
import { Navigate } from "react-router-dom";

// Check authentication, e.g., by checking for a token in localStorage
const isAuthenticated = () => {
  return Boolean(localStorage.getItem("token")); // Replace 'token' with your storage key
};

// PrivateRoute component that wraps around protected routes
const PrivateRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return isAuthenticated() ? (
    <>{children} {/* Render the child component if authenticated */}</>
  ) : (
    <Navigate to="/login" /> // Redirect to login if not authenticated
  );
};

export default PrivateRoute;

================
File: client/src/Routing/routes.tsx
================
import { HomePage, ServerPage, LoginPage, RegisterPage } from "../Pages";
// import PrivateRoute from "./PrivateRoute";

export const routes = [
  {
    path: "/",
    element: <HomePage />,
  },
  {
    path: "/server",
    element: <ServerPage />,
  },
  // This should be protected but for development leave it open
  // {
  //   path: "/server",
  //   element: (
  //     <PrivateRoute>
  //       <ServerPage />
  //     </PrivateRoute>
  //   ),
  // },
  // {
  //   path: "/",
  //   element: (
  //     <PrivateRoute>
  //       <HomePage />
  //     </PrivateRoute>
  //   ),
  // },
  {
    path: "/login",
    element: <LoginPage />,
  },
  {
    path: "/register",
    element: <RegisterPage />,
  },
];

================
File: client/src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: client/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: ["./index.html", "./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};

================
File: client/tsconfig.app.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

================
File: client/tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: client/tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: client/vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "src"), // This line adds the alias for Vite
    },
  },
});

================
File: discord-clone-erd.mermaid
================
erDiagram
    User {
        int id PK
        string username
        string email
        string password
        string avatarUrl
        datetime createdAt
    }
    
    Server {
        int id PK
        string name
        string iconUrl
        datetime createdAt
    }
    
    ServerMember {
        int id PK
        int userId FK
        int serverId FK
        int roleId FK
        datetime joinedAt
    }
    
    Channel {
        int id PK
        int serverId FK
        string name
        boolean isVoice
        datetime createdAt
    }
    
    Message {
        int id PK
        string content
        datetime createdAt
        int channelId FK
        int userId FK
        int recipientId FK
        enum messageType
    }
    
    Friend {
        int id PK
        int userId FK
        int friendId FK
    }
    
    Reaction {
        int id PK
        string emoji
        int messageId FK
        int userId FK
        datetime createdAt
    }
    
    Role {
        int id PK
        string name
        int serverId FK
    }
    
    Permission {
        int id PK
        int serverId FK
        int userId FK
        int roleId FK
    }

    User ||--o{ ServerMember : "has"
    User ||--o{ Message : "sends"
    User ||--o{ Message : "receives"
    User ||--o{ Reaction : "creates"
    User ||--o{ Friend : "has"
    User ||--o{ Permission : "has"
    
    Server ||--o{ ServerMember : "has"
    Server ||--o{ Channel : "contains"
    Server ||--o{ Role : "has"
    Server ||--o{ Permission : "contains"
    
    Channel ||--o{ Message : "contains"
    
    Message ||--o{ Reaction : "has"
    
    Role ||--o{ ServerMember : "assigned to"
    Role ||--o{ Permission : "has"

================
File: Online FlowChart & Diagrams Editor - Mermaid Live Editor.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Online FlowChart &amp; Diagrams Editor - Mermaid Live Editor</title>
    <meta
      name="og:image"
      content="https://github.com/mermaid-js/mermaid/raw/develop/img/header.png" />
    <link rel="canonical" href="https://mermaid.live" />
    <meta
      name="description"
      content="Simplify documentation and avoid heavy tools. Open source Visio Alternative. Commonly used for explaining your code! Mermaid is a simple markdown-like script language for generating charts from text via javascript." />
    <link rel="icon" type="image/png" href="./favicon.svg" />
    <link rel="mask-icon" href="./favicon.svg" color="#000000" />
    <meta name="theme-color" content="#6366F1" />
    <link rel="manifest" href="./manifest.json" />
    
		<link rel="modulepreload" href="./_app/immutable/entry/start.Y18ssdKY.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/entry.BVfnCdAW.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/scheduler.Cj2_EUWt.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/index.BIOmDrk3.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/paths.CH77JY6z.js">
		<link rel="modulepreload" href="./_app/immutable/entry/app.CL4MkKCq.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/preload-helper.T-GT2vH5.js">
		<link rel="modulepreload" href="./_app/immutable/chunks/index.BrunZg7c.js">
  </head>
  <body style="overflow: hidden">
    <div id="svelte">
			<script>
				{
					__sveltekit_2t42r7 = {
						base: new URL(".", location).pathname.slice(0, -1)
					};

					const element = document.currentScript.parentElement;

					Promise.all([
						import("./_app/immutable/entry/start.Y18ssdKY.js"),
						import("./_app/immutable/entry/app.CL4MkKCq.js")
					]).then(([kit, app]) => {
						kit.start(app, element);
					});
				}
			</script>
		</div>
  </body>
</html>

================
File: package.json
================
{
  "name": "discord-2",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "install-all": "npm install --workspaces",
    "start": "npm run dev --workspace=server"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

================
File: README.MD
================
# Discord-2

    todo:
        - change id in prisma from autoincrement to uuid
        - create server tooltip when hover on server icon and white left line
        - Connect friend filter nav to friend list 
        - get chat working
        - add friends ability

================
File: server/.gitignore
================
node_modules
# Keep environment variables out of version control
.env

================
File: server/package.json
================
{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "ts-node src/index.ts",
    "seed": "ts-node src/db/seed.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@prisma/client": "^5.21.1",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "jsonwebtoken": "^9.0.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "pg": "^8.13.1",
    "prisma": "^5.21.1",
    "socket.io": "^4.8.1"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/node": "^22.8.1",
    "@types/passport": "^1.0.17",
    "@types/passport-jwt": "^4.0.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.3"
  }
}

================
File: server/prisma/migrations/20241028162706_init/migration.sql
================
-- CreateTable
CREATE TABLE "User" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "email" TEXT NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

================
File: server/prisma/migrations/20241028203317_init/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `name` on the `User` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[username]` on the table `User` will be added. If there are existing duplicate values, this will fail.
  - Added the required column `password` to the `User` table without a default value. This is not possible if the table is not empty.
  - Added the required column `username` to the `User` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "User" DROP COLUMN "name",
ADD COLUMN     "avatarUrl" TEXT,
ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "password" TEXT NOT NULL,
ADD COLUMN     "username" TEXT NOT NULL;

-- CreateTable
CREATE TABLE "Server" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "iconUrl" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Server_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ServerMember" (
    "id" SERIAL NOT NULL,
    "userId" INTEGER NOT NULL,
    "serverId" INTEGER NOT NULL,
    "joinedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "roleId" INTEGER,

    CONSTRAINT "ServerMember_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Channel" (
    "id" SERIAL NOT NULL,
    "serverId" INTEGER NOT NULL,
    "name" TEXT NOT NULL,
    "isVoice" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Channel_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Message" (
    "id" SERIAL NOT NULL,
    "content" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "channelId" INTEGER NOT NULL,
    "userId" INTEGER NOT NULL,

    CONSTRAINT "Message_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Friend" (
    "id" SERIAL NOT NULL,
    "userId" INTEGER NOT NULL,
    "friendId" INTEGER NOT NULL,

    CONSTRAINT "Friend_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Reaction" (
    "id" SERIAL NOT NULL,
    "emoji" TEXT NOT NULL,
    "messageId" INTEGER NOT NULL,
    "userId" INTEGER NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "Reaction_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Role" (
    "id" SERIAL NOT NULL,
    "serverId" INTEGER NOT NULL,
    "name" TEXT NOT NULL,
    "permissions" JSONB NOT NULL,

    CONSTRAINT "Role_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "ServerMember_userId_serverId_key" ON "ServerMember"("userId", "serverId");

-- CreateIndex
CREATE UNIQUE INDEX "Friend_userId_friendId_key" ON "Friend"("userId", "friendId");

-- CreateIndex
CREATE UNIQUE INDEX "Reaction_userId_messageId_emoji_key" ON "Reaction"("userId", "messageId", "emoji");

-- CreateIndex
CREATE UNIQUE INDEX "User_username_key" ON "User"("username");

-- AddForeignKey
ALTER TABLE "ServerMember" ADD CONSTRAINT "ServerMember_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ServerMember" ADD CONSTRAINT "ServerMember_serverId_fkey" FOREIGN KEY ("serverId") REFERENCES "Server"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ServerMember" ADD CONSTRAINT "ServerMember_roleId_fkey" FOREIGN KEY ("roleId") REFERENCES "Role"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Channel" ADD CONSTRAINT "Channel_serverId_fkey" FOREIGN KEY ("serverId") REFERENCES "Server"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Message" ADD CONSTRAINT "Message_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Message" ADD CONSTRAINT "Message_channelId_fkey" FOREIGN KEY ("channelId") REFERENCES "Channel"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Friend" ADD CONSTRAINT "Friend_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Friend" ADD CONSTRAINT "Friend_friendId_fkey" FOREIGN KEY ("friendId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Reaction" ADD CONSTRAINT "Reaction_messageId_fkey" FOREIGN KEY ("messageId") REFERENCES "Message"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Reaction" ADD CONSTRAINT "Reaction_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Role" ADD CONSTRAINT "Role_serverId_fkey" FOREIGN KEY ("serverId") REFERENCES "Server"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

================
File: server/prisma/migrations/20241031185300_add_recipient_id_and_message_type/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `permissions` on the `Role` table. All the data in the column will be lost.
  - Added the required column `messageType` to the `Message` table without a default value. This is not possible if the table is not empty.

*/
-- CreateEnum
CREATE TYPE "MessageType" AS ENUM ('CHANNEL', 'PRIVATE');

-- DropForeignKey
ALTER TABLE "Message" DROP CONSTRAINT "Message_channelId_fkey";

-- AlterTable
ALTER TABLE "Message" 
ADD COLUMN "messageType" "MessageType" NOT NULL DEFAULT 'CHANNEL', 
ADD COLUMN "recipientId" INTEGER, 
ALTER COLUMN "channelId" DROP NOT NULL;


-- AlterTable
ALTER TABLE "Role" DROP COLUMN "permissions";

-- CreateTable
CREATE TABLE "Permission" (
    "id" SERIAL NOT NULL,
    "serverId" INTEGER NOT NULL,
    "userId" INTEGER NOT NULL,
    "roleId" INTEGER NOT NULL,

    CONSTRAINT "Permission_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "Message" ADD CONSTRAINT "Message_recipientId_fkey" FOREIGN KEY ("recipientId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Message" ADD CONSTRAINT "Message_channelId_fkey" FOREIGN KEY ("channelId") REFERENCES "Channel"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Permission" ADD CONSTRAINT "Permission_roleId_fkey" FOREIGN KEY ("roleId") REFERENCES "Role"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Permission" ADD CONSTRAINT "Permission_serverId_fkey" FOREIGN KEY ("serverId") REFERENCES "Server"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Permission" ADD CONSTRAINT "Permission_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

================
File: server/prisma/migrations/20241031185431_add_default_message_type/migration.sql
================
-- AlterTable
ALTER TABLE "Message" ALTER COLUMN "messageType" DROP DEFAULT;

================
File: server/prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"

================
File: server/prisma/schema.prisma
================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatarUrl String? // Optional profile picture
  createdAt DateTime @default(now())

  // Relationships
  memberships      ServerMember[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageRecipient")
  reactions        Reaction[]
  friends          Friend[]       @relation("UserFriends")
  friendOf         Friend[]       @relation("FriendUsers")
  permissions      Permission[]
}

model Server {
  id        Int      @id @default(autoincrement())
  name      String
  iconUrl   String?
  createdAt DateTime @default(now())

  // Relationships
  channels    Channel[]
  members     ServerMember[]
  roles       Role[]
  permissions Permission[]
}

model ServerMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  serverId Int
  joinedAt DateTime @default(now())
  roleId   Int?

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  server Server @relation(fields: [serverId], references: [id])
  role   Role?  @relation(fields: [roleId], references: [id])

  @@unique([userId, serverId])
}

model Channel {
  id        Int      @id @default(autoincrement())
  serverId  Int
  name      String
  isVoice   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  server   Server    @relation(fields: [serverId], references: [id])
  messages Message[]
}

model Message {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  channelId   Int? // Nullable for private messages
  userId      Int
  recipientId Int? // Nullable for channel messages
  messageType MessageType // Using enum instead of String

  // Relationships
  user      User       @relation("MessageSender", fields: [userId], references: [id])
  recipient User?      @relation("MessageRecipient", fields: [recipientId], references: [id])
  channel   Channel?   @relation(fields: [channelId], references: [id])
  reactions Reaction[]
}

enum MessageType {
  CHANNEL
  PRIVATE
}

model Friend {
  id       Int @id @default(autoincrement())
  userId   Int
  friendId Int

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUsers", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId Int
  userId    Int
  createdAt DateTime @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, emoji])
}

model Role {
  id       Int    @id @default(autoincrement())
  name     String
  serverId Int

  // Relationships
  server        Server         @relation(fields: [serverId], references: [id])
  permissions   Permission[]
  serverMembers ServerMember[]
}

model Permission {
  id       Int @id @default(autoincrement())
  serverId Int
  userId   Int
  roleId   Int

  // Relationships
  role   Role   @relation(fields: [roleId], references: [id])
  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

================
File: server/src/Auth/passportConfig.ts
================
import passport from 'passport';
import prisma from '../db/prisma';
import { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';

const JWT_SECRET = process.env.JWT_SECRET as string;
if (!JWT_SECRET) {
  throw new Error("JWT_SECRET is not defined in environment variables");
}
// JWT Strategy for protected routes
passport.use(
  new JwtStrategy(
    {
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: JWT_SECRET,
    },
    // jwtPayload is the decoded JWT payload
    async (jwtPayload: { id: any; }, done: (arg0: unknown, arg1: boolean | { id: number; username: string; email: string; password: string; avatarUrl: string | null; createdAt: Date; }) => any) => {
      try {
        const user = await prisma.user.findUnique({
          where: { id: jwtPayload.id },
        });

        return user ? done(null, user) : done(null, false);
      } catch (error) {
        return done(error, false);
      }
    }
  )
);

export default passport;

================
File: server/src/Controllers/AppController.ts
================
import express, { Router, Request, Response, NextFunction } from "express";
import { getChannels, getFriends } from "../db/Queries";
export const getChannelsInfo = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = Number(req.params.userId);
    const channels = await getChannels(userId);
    res.status(200).json({ success: true, channels });
  } catch (err) {
    if (!res.headersSent) {
      next(err); // Passes the error to the error handler only if headers aren't sent
    }
  }
};

export const getFriendsInfo = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = Number(req.params.userId);
    const friends = await getFriends(userId);
    res.status(200).json({ success: true, friends });
  } catch (err) {
    if (!res.headersSent) {
      next(err); // Passes the error to the error handler only if headers aren't sent
    }
  }
};

================
File: server/src/Controllers/AuthController.ts
================
import bcrypt from "bcryptjs";
import prisma from "../db/prisma";
import { NextFunction, Request, Response } from "express";
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "a santa cat";

export const signUp = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { username, email, name, password } = req.body;

    const hashedPassword = await bcrypt.hash(password, 10);

    const user = await prisma.user.create({
      data: {
        username,
        email,
        password: hashedPassword,
      },
    });

    res
      .status(200)
      .json({ success: true, message: "Successfully Signed up", user });
  } catch (err) {
    if (!res.headersSent) {
      next(err); // Passes the error to the error handler only if headers aren't sent
    }
  }
};
// // basic login
// exports.login = (req, res, next) => {
//     passport.authenticate("local", {
//         successRedirect: "/",
//         failureRedirect: "/"
//     })(req, res, next)
//     // don't know if i need (req,res, next) but it works
// }

export const login = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const { email, password } = req.body;
    const user = await prisma.user.findUnique({
      where: { email },
    });
    if (!user) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    if (!(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: "12h" });
    res.status(200).json({ message: "Successfully Logged in", token, user });
  } catch (err) {
    next(err);
  }
};
export const loginAsGuest = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    // Find or create the guest user in the database
    let guestUser = await prisma.user.findUnique({
      where: { username: "guest" },
    });

    if (!guestUser) {
      // If guest user doesn't exist, create the user
      guestUser = await prisma.user.create({
        data: {
          username: "guest",
          email: "guest@example.com",
          password: await bcrypt.hash("guestguest", 10),
        },
      });
    }

    // Generate JWT token
    const token = jwt.sign(
      { id: guestUser.id, username: guestUser.username },
      JWT_SECRET,
      {
        expiresIn: "1h", // Token expires in 1 hour
      }
    );

    // Send the token and user details back to the client
    res.status(200).json({ message: "Logged in as guest", token });
  } catch (error) {
    console.error("Error during guest login:", error);
    next(error);
  }
};

// Don't need logout when dealing with authentication with JWT, handled by client side by removing token
// export const logOut = (req: Request, res: Response, next: NextFunction) => {
//   req.logout((err) => {
//     if (err) return next(err);
//     res.status(201).json({ message: 'Successfully logged out' });
//   });
// };

================
File: server/src/Controllers/ChatController.ts
================
// src/Controllers/chatController.ts
import {
  createChannelMessage,
  getChannelMessages,
  createPrivateMessage,
  getPrivateMessages,
} from "../db/messageQueries";
import { Request, Response } from "express";

// Handle creating a channel message
const handleCreateChannelMessage = async (req: Request, res: Response) => {
  const { content, userId, channelId } = req.body;

  try {
    const message = await createChannelMessage(content, userId, channelId);
    res.status(201).json(message);
  } catch (error) {
    res.status(500).json({ error: "Failed to create channel message" });
  }
};

// Handle retrieving channel messages
const handleGetChannelMessages = async (req: Request, res: Response) => {
  const { channelId } = req.params;

  try {
    const messages = await getChannelMessages(parseInt(channelId));
    res.status(200).json(messages);
  } catch (error) {
    res.status(500).json({ error: "Failed to retrieve channel messages" });
  }
};

// Handle creating a private message
const handleCreatePrivateMessage = async (req: Request, res: Response) => {
  const { content, userId, recipientId } = req.body;

  try {
    const message = await createPrivateMessage(content, userId, recipientId);
    res.status(201).json(message);
  } catch (error) {
    res.status(500).json({ error: "Failed to create private message" });
  }
};

// Handle retrieving private messages between users
const handleGetPrivateMessages = async (req: Request, res: Response) => {
  const { userId, friendId } = req.params;

  try {
    const messages = await getPrivateMessages(
      parseInt(userId),
      parseInt(friendId)
    );
    res.status(200).json(messages);
  } catch (error) {
    res.status(500).json({ error: "Failed to retrieve private messages" });
  }
};

export {
  handleCreateChannelMessage,
  handleGetChannelMessages,
  handleCreatePrivateMessage,
  handleGetPrivateMessages,
};

================
File: server/src/db/messageQueries.ts
================
import prisma from "./prisma";

// Create a message in a channel
async function createChannelMessage(
  content: string,
  userId: number,
  channelId: number
) {
  return prisma.message.create({
    data: {
      content,
      userId,
      channelId,
      messageType: "CHANNEL",
    },
  });
}

// Get all messages for a channel
async function getChannelMessages(channelId: number) {
  return prisma.message.findMany({
    where: {
      channelId,
      messageType: "CHANNEL",
    },
    include: { user: true },
    orderBy: { createdAt: "asc" },
  });
}

// Save a new private message
async function createPrivateMessage(
  content: string,
  userId: number,
  recipientId: number
) {
  return prisma.message.create({
    data: {
      content,
      userId,
      recipientId,
      messageType: "PRIVATE",
    },
  });
}

// Get all private messages between two users
async function getPrivateMessages(userId: number, friendId: number) {
  return prisma.message.findMany({
    where: {
      OR: [
        { userId, recipientId: friendId },
        { userId: friendId, recipientId: userId },
      ],
      messageType: "PRIVATE",
    },
    include: { user: true },
    orderBy: { createdAt: "asc" },
  });
}

export {
  createChannelMessage,
  getChannelMessages,
  createPrivateMessage,
  getPrivateMessages,
};

================
File: server/src/db/prisma.ts
================
// prisma.js
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

export default prisma; // Use ES Module syntax for exporting

================
File: server/src/db/Queries.ts
================
import prisma from "./prisma";

// src/db/Queries.ts
// Find all servers where the user is a member
// Include all channels for each server
// Include the user's role information in each server
// Handle errors appropriately
export const getChannels = async (userId: number) => {
  if (!userId || isNaN(userId)) {
    console.error("Invalid userId:", userId);
    throw new Error("Valid userId is required");
  }

  try {
    return await prisma.server.findMany({
      where: {
        members: {
          some: {
            userId: {
              equals: userId,
            },
          },
        },
      },
      include: {
        channels: {
          orderBy: {
            createdAt: "asc",
          },
        },
      },
    });
  } catch (error) {
    console.error("Error fetching channels:", error);
    throw error;
  }
};

export const getFriends = async (userId: number) => {
  try {
    // Retrieve friends where the user is the initiator or recipient in the Friend relationship
    const userWithFriends = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        friends: {
          include: { friend: true }, // Include details about the friend
        },
        friendOf: {
          include: { user: true }, // Include details about the friend
        },
      },
    });

    // Format the response to combine both friend lists
    const friendsList = [
      ...(userWithFriends?.friends.map((f) => f.friend) || []),
      ...(userWithFriends?.friendOf.map((f) => f.user) || []),
    ];

    // console.log("friendsList", friendsList);
    return friendsList;
  } catch (error) {
    console.error("Error fetching friends:", error);
    throw error;
  }
};

export const getMessages = async (channelId: number) =>
  await prisma.message.findMany({
    where: { channelId },
    orderBy: { createdAt: "desc" },
    include: { user: true },
  });

export const getChannel = async (channelId: number) =>
  await prisma.channel.findUnique({ where: { id: channelId } });

export const getUser = async (userId: number) =>
  await prisma.user.findUnique({ where: { id: userId } });

================
File: server/src/db/seed.ts
================
import prisma from './prisma';

async function main() {
  // Create users
  const user1 = await prisma.user.create({
    data: {
      username: 'user_one',
      email: 'user1@example.com',
      password: 'password1',
    },
  });

  const user2 = await prisma.user.create({
    data: {
      username: 'user_two',
      email: 'user2@example.com',
      password: 'password2',
    },
  });

  const user3 = await prisma.user.create({
    data: {
      username: 'user_three',
      email: 'user3@example.com',
      password: 'password3',
    },
  });

  // Create servers
  const server1 = await prisma.server.create({
    data: {
      name: 'Tech Enthusiasts',
      iconUrl: 'https://example.com/icon1.png',
      members: {
        create: [
          { userId: user1.id },
          { userId: user2.id },
          { userId: user3.id },
        ],
      },
    },
  });

  const server2 = await prisma.server.create({
    data: {
      name: 'Gaming Hub',
      iconUrl: 'https://example.com/icon2.png',
      members: {
        create: [{ userId: user1.id }, { userId: user2.id }],
      },
    },
  });

  // Create channels
  const generalChannel = await prisma.channel.create({
    data: {
      name: 'general',
      isVoice: false,
      serverId: server1.id,
    },
  });

  const techNewsChannel = await prisma.channel.create({
    data: {
      name: 'tech-news',
      isVoice: false,
      serverId: server1.id,
    },
  });

  const gamingChannel = await prisma.channel.create({
    data: {
      name: 'gaming-talk',
      isVoice: false,
      serverId: server2.id,
    },
  });

  // Create messages
  await prisma.message.createMany({
    data: [
      {
        content: 'Welcome to the server!',
        userId: user1.id,
        channelId: generalChannel.id,
      },
      {
        content: 'Hey everyone!',
        userId: user2.id,
        channelId: generalChannel.id,
      },
      {
        content: 'Did you see the latest tech news?',
        userId: user3.id,
        channelId: techNewsChannel.id,
      },
      {
        content: 'Who wants to play tonight?',
        userId: user1.id,
        channelId: gamingChannel.id,
      },
    ],
  });

// Create roles
const adminRole = await prisma.role.create({
    data: {
      name: 'Admin',
      serverId: server1.id, // Include the serverId
      permissions: {
        create: [{ serverId: server1.id, userId: user1.id }],
      },
    },
  });
  
  const memberRole = await prisma.role.create({
    data: {
      name: 'Member',
      serverId: server1.id, // Include the serverId
      permissions: {
        create: [{ serverId: server1.id, userId: user2.id }],
      },
    },
  });
  

  // Create friendships
  await prisma.friend.createMany({
    data: [
      { userId: user1.id, friendId: user2.id },
      { userId: user2.id, friendId: user3.id },
      { userId: user1.id, friendId: user3.id },
    ],
  });

  console.log('Database has been seeded successfully!');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

================
File: server/src/index.ts
================
import express from "express";
import dotenv from "dotenv";
import prisma from "./db/prisma";
import cors from "cors";
import authRouter from "./Routes/AuthRouter";
import appRouter from "./Routes/AppRouter";
import chatRouter from "./Routes/ChatRouter"; // Import chatRouter
import { errorHandler } from "./Middleware/ErrorHandler";
import passport from "./Auth/passportConfig";
import http from "http";
import { Server } from "socket.io";

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// socket.io setup
const server = http.createServer(app); // Create HTTP server with Express app
// Socket.IO cors Configuration: Added CORS settings specifically for the Socket.IO instance, targeting http://localhost:5173 (the default for Vite) to avoid connection issues.

const io = new Server(server, {
  cors: {
    origin: "http://localhost:5173", // Client origin for CORS policy
    methods: ["GET", "POST"],
  },
});

io.on("connection", (socket) => {
  console.log("A user connected");

  socket.on("chat message", (msg) => {
    io.emit("chat message", msg); // Broadcast message to all clients
  });

  socket.on("disconnect", () => {
    console.log("A user disconnected");
  });
});

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(
  cors({
    origin: "http://localhost:5173", // Client origin for CORS policy
  })
);
app.use(passport.initialize());

app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  next();
});

// Set up routing and middleware
app.use("/", appRouter);
app.use("/auth", authRouter);
app.use("/chat", chatRouter); // Add the chat router
app.use(errorHandler);

// Handle graceful shutdowns for Prisma
process.on("SIGINT", async () => {
  console.log("Received SIGINT, disconnecting from database");
  await prisma.$disconnect();
  process.exit(0);
});

process.on("SIGTERM", async () => {
  console.log("Received SIGTERM, disconnecting from database");
  await prisma.$disconnect();
  process.exit(0);
});

// Start the combined HTTP and WebSocket server
// Single server.listen Call: We call server.listen(PORT) instead of app.listen, ensuring that both the Express and WebSocket servers are served from the same port.
server.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

================
File: server/src/Middleware/AuthenticateJWT.ts
================
// Don't really need this as site is protected, just configure this out on the client side.
import jwt, { JwtPayload } from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

const JWT_SECRET = process.env.JWT_SECRET as string;
if (!JWT_SECRET) {
  throw new Error("JWT_SECRET is not defined in environment variables");
}

// Extend Express Request to include `user`
interface AuthenticatedRequest extends Request {
  user?: string | JwtPayload;
}

export const authenticateJWT = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers.authorization;

  if (authHeader) {
    const token = authHeader.split(' ')[1]; // Corrected extraction from "Bearer <token>"

    if (!token) {
      return res.status(401).json({ message: 'Unauthorized, token is missing' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
      if (err) {
        return res.status(403).json({ message: 'Forbidden, invalid token' });
      }

      req.user = user; // Attach user information to the request
      next(); // Continue to the protected route
    });
  } else {
    return res.status(401).json({ message: 'Unauthorized, no token provided' });
  }
};

================
File: server/src/Middleware/ErrorHandler.ts
================
import { Request, Response, NextFunction } from 'express';

interface ErrorWithStatus extends Error {
  status?: number;
}

// Error handling middleware
export const errorHandler = (
  err: ErrorWithStatus,
  req: Request,
  res: Response,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  next: NextFunction
) => {
  console.error('Error:', err.message);

  // If the error doesn't have a status code, default to 500 (Internal Server Error)
  const statusCode = err.status || 500;

  // Send JSON error response
  res.status(statusCode).json({
    message: err.message || 'Internal Server Error',
    status: statusCode,
  });
};

================
File: server/src/Routes/AppRouter.ts
================
import express, { Router, Request, Response, NextFunction } from "express";
import { getChannelsInfo, getFriendsInfo } from "../Controllers/AppController";
const router: Router = express.Router();

router.get("/", (req: Request, res: Response, next: NextFunction) => {
  res.send("Hello World!");
});

router.get(
  "/channels/:userId",
  (req: Request, res: Response, next: NextFunction) => {
    getChannelsInfo(req, res, next);
  }
);

router.get(
  "/friends/:userId",
  (req: Request, res: Response, next: NextFunction) => {
    getFriendsInfo(req, res, next);
  }
);

export default router;

================
File: server/src/Routes/AuthRouter.ts
================
import express, { Router, Request, Response, NextFunction } from 'express';
import { signUp, login, loginAsGuest } from '../Controllers/AuthController';
// import {
//   signupValidationRules,
//   validateSignup,
// } from '../middleware/validateSignup';

const router: Router = express.Router();

// router.post('/signup', signupValidationRules, validateSignup, signUp);

router.post('/register', (req: Request, res: Response, next: NextFunction) => {
    signUp(req, res, next);
  });

// router.post('/login', login);
router.post('/login', (req: Request, res: Response, next: NextFunction) => {
  login(req, res, next);
});

router.post('/login/guest', loginAsGuest);

// router.get('/logout', logOut);

export default router;

================
File: server/src/Routes/ChatRouter.ts
================
// src/Routes/chatRouter.ts
import express from "express";
import {
  handleCreateChannelMessage,
  handleGetChannelMessages,
  handleCreatePrivateMessage,
  handleGetPrivateMessages,
} from "../Controllers/ChatController";

const router = express.Router();

// Routes for channel messages
router.post("/channel/messages", handleCreateChannelMessage);
router.get("/channel/messages/:channelId", handleGetChannelMessages);

// Routes for private messages
router.post("/private/messages", handleCreatePrivateMessage);
router.get("/private/messages/:userId/:friendId", handleGetPrivateMessages);

export default router;

================
File: server/tsconfig.json
================
{
    "compilerOptions": {
      "target": "ESNext",
      "module": "CommonJS",
      "rootDir": "./src",
      "outDir": "./dist",
      "esModuleInterop": true,
      "strict": true,
      "skipLibCheck": true
    }
  }
