// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  avatarUrl String? // Optional profile picture
  createdAt DateTime @default(now())

  // Relationships
  memberships      ServerMember[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageRecipient")
  reactions        Reaction[]
  friends          Friend[]       @relation("UserFriends")
  friendOf         Friend[]       @relation("FriendUsers")
  permissions      Permission[]

  // Friend request relations
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

model Server {
  id        Int      @id @default(autoincrement())
  name      String
  iconUrl   String?
  createdAt DateTime @default(now())

  // Relationships
  channels    Channel[]
  members     ServerMember[]
  roles       Role[]
  permissions Permission[]
}

model ServerMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  serverId Int
  joinedAt DateTime @default(now())
  roleId   Int?

  // Relationships
  user   User   @relation(fields: [userId], references: [id])
  server Server @relation(fields: [serverId], references: [id])
  role   Role?  @relation(fields: [roleId], references: [id])

  @@unique([userId, serverId])
}

model Channel {
  id        Int      @id @default(autoincrement())
  serverId  Int
  name      String
  isVoice   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relationships
  server   Server    @relation(fields: [serverId], references: [id])
  messages Message[]
}

model Message {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  channelId   Int? // Nullable for private messages
  userId      Int
  recipientId Int? // Nullable for channel messages
  messageType MessageType // Using enum instead of String

  // Relationships
  user      User       @relation("MessageSender", fields: [userId], references: [id])
  recipient User?      @relation("MessageRecipient", fields: [recipientId], references: [id])
  channel   Channel?   @relation(fields: [channelId], references: [id])
  reactions Reaction[]
}

enum MessageType {
  CHANNEL
  PRIVATE
}

model Friend {
  id       Int @id @default(autoincrement())
  userId   Int
  friendId Int

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUsers", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Ensure a user can only be friends with another user once
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())

  // Relationships
  sender    User @relation("SentRequests", fields: [senderId], references: [id])
  recipient User @relation("ReceivedRequests", fields: [recipientId], references: [id])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId Int
  userId    Int
  createdAt DateTime @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, emoji])
}

model Role {
  id       Int    @id @default(autoincrement())
  name     String
  serverId Int

  // Relationships
  server        Server         @relation(fields: [serverId], references: [id])
  permissions   Permission[]
  serverMembers ServerMember[]
}

model Permission {
  id       Int @id @default(autoincrement())
  serverId Int
  userId   Int
  roleId   Int

  // Relationships
  role   Role   @relation(fields: [roleId], references: [id])
  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}
