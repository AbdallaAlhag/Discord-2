generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  avatarUrl        String?
  createdAt        DateTime        @default(now())
  password         String
  username         String          @unique
  friendOf         Friend[]        @relation("FriendUsers")
  friends          Friend[]        @relation("UserFriends")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedMessages Message[]       @relation("MessageRecipient")
  sentMessages     Message[]       @relation("MessageSender")
  permissions      Permission[]
  reactions        Reaction[]
  memberships      ServerMember[]
}

model Server {
  id          Int            @id @default(autoincrement())
  name        String
  iconUrl     String?
  createdAt   DateTime       @default(now())
  channels    Channel[]
  permissions Permission[]
  roles       Role[]
  members     ServerMember[]
}

model Channel {
  id        Int       @id @default(autoincrement())
  serverId  Int
  name      String
  isVoice   Boolean   @default(false)
  createdAt DateTime  @default(now())
  server    Server    @relation(fields: [serverId], references: [id])
  messages  Message[]
}

model ServerMember {
  id       Int      @id @default(autoincrement())
  userId   Int
  serverId Int
  joinedAt DateTime @default(now())
  roleId   Int?
  role     Role?    @relation(fields: [roleId], references: [id])
  server   Server   @relation(fields: [serverId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, serverId])
}

model Message {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  channelId   Int?
  userId      Int
  messageType MessageType
  recipientId Int?
  channel     Channel?    @relation(fields: [channelId], references: [id])
  recipient   User?       @relation("MessageRecipient", fields: [recipientId], references: [id])
  user        User        @relation("MessageSender", fields: [userId], references: [id])
  reactions   Reaction[]
}

enum MessageType {
  CHANNEL
  PRIVATE
}
model Friend {
  id       Int  @id @default(autoincrement())
  userId   Int
  friendId Int
  friend   User @relation("FriendUsers", fields: [friendId], references: [id])
  user     User @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  messageId Int
  userId    Int
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, emoji])
}

model Role {
  id            Int            @id @default(autoincrement())
  serverId      Int
  name          String
  permissions   Permission[]
  server        Server         @relation(fields: [serverId], references: [id])
  serverMembers ServerMember[]
}

model Permission {
  id       Int    @id @default(autoincrement())
  serverId Int
  userId   Int
  roleId   Int
  role     Role   @relation(fields: [roleId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

