generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  avatarUrl        String?          
  createdAt        DateTime        @default(now())
  password         String
  username         String          @unique
  friendOf         Friend[]        @relation("FriendUsers")
  friends          Friend[]        @relation("UserFriends")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedMessages Message[]       @relation("MessageRecipient")
  sentMessages     Message[]       @relation("MessageSender")
  reactions        Reaction[]
  memberships      ServerMember[]
  createdInvites   ServerInvite[]  @relation("InviteCreator")
  usedInvites      ServerInvite[]  @relation("InviteUser")

  onlineStatus        Boolean              @default(false)
  messageReadReceipts MessageReadReceipt[]
}

model Server {
  id        String         @id @default(uuid())
  name      String
  iconUrl   String?
  createdAt DateTime       @default(now())
  channels  Channel[]
  members   ServerMember[]
  invites   ServerInvite[]
}

model Channel {
  id        String    @id @default(uuid())
  serverId  String
  name      String
  isVoice   Boolean   @default(false)
  createdAt DateTime  @default(now())
  server    Server    @relation(fields: [serverId], references: [id])
  messages  Message[]
}

model ServerMember {
  id           String     @id @default(uuid())
  userId       String
  serverId     String
  joinedAt     DateTime   @default(now())
  role         ServerRole @default(MEMBER) // New enum field
  server       Server     @relation(fields: [serverId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  // Add computed fields for username and onlineStatus
  username     String?    @map("user.username")
  onlineStatus Boolean?   @map("user.onlineStatus")
  avatarUrl    String?    @map("user.avatarUrl")

  @@unique([userId, serverId])
}

// Add this enum
enum ServerRole {
  OWNER
  ADMIN
  MEMBER
}

model Message {
  id          String      @id @default(uuid())
  content     String
  createdAt   DateTime    @default(now())
  channelId   String?
  userId      String
  messageType MessageType
  recipientId String?
  channel     Channel?    @relation(fields: [channelId], references: [id])
  recipient   User?       @relation("MessageRecipient", fields: [recipientId], references: [id])
  user        User        @relation("MessageSender", fields: [userId], references: [id])
  reactions   Reaction[]

  // New relation to track read receipts
  readReceipts MessageReadReceipt[]
}

model MessageReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
}

enum MessageType {
  CHANNEL
  PRIVATE
}

model Friend {
  id       String @id @default(uuid())
  userId   String
  friendId String
  friend   User   @relation("FriendUsers", fields: [friendId], references: [id])
  user     User   @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model FriendRequest {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  recipient   User     @relation("ReceivedRequests", fields: [recipientId], references: [id])
  sender      User     @relation("SentRequests", fields: [senderId], references: [id])
}

model ServerInvite {
  id          String    @id @default(uuid())
  inviteCode  String    @unique
  serverId    String
  createdById String
  usedById    String?
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  usedAt      DateTime?
  maxUses     Int       @default(1)
  uses        Int       @default(0)
  isRevoked   Boolean   @default(false)

  // Relations
  server    Server @relation(fields: [serverId], references: [id])
  createdBy User   @relation("InviteCreator", fields: [createdById], references: [id])
  usedBy    User?  @relation("InviteUser", fields: [usedById], references: [id])

  @@index([inviteCode])
  @@index([serverId])
}

model Reaction {
  id        String   @id @default(uuid())
  emoji     String
  messageId String
  userId    String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, emoji])
}
